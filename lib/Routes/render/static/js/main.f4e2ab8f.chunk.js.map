{"version":3,"sources":["components/Login/Login.js","App.js","serviceWorker.js","index.js"],"names":["WrappedNormalLoginForm","Form","create","props","getFieldDecorator","form","Option","Select","react_default","a","createElement","es_form","onSubmit","event","preventDefault","validateFields","err","values","Item","rules","required","message","input","prefix","icon","type","style","color","placeholder","es_select","value","es_button","htmlType","className","Login","state","fields","email","password","role","handleChange","changedFields","_this","setState","_ref","Object","objectSpread","handleSubmit","data","username","axios","post","then","res","console","log","id","assign","this","onChange","Component","App","components_Login_Login","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.f4e2ab8f.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport axios from \"axios\";\r\nimport {\r\n    Form, Icon, Input, Button, Select\r\n} from \"antd\";\r\nimport \"./styles/styles.css\";\r\n\r\nconst WrappedNormalLoginForm = Form.create({})((props) => {\r\n    const { getFieldDecorator } = props.form;\r\n    const {Option} = Select;\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        props.form.validateFields((err, values) => {\r\n            if(!err) {\r\n                props.onSubmit(values);\r\n            }\r\n        });\r\n    }\r\n    return (<Form onSubmit={handleSubmit}>\r\n                <Form.Item>\r\n                    {getFieldDecorator(\"email\", {\r\n                        rules: [{required: true, message: \"Email cannot be empty\"}]\r\n                        })(\r\n                            <Input prefix={<Icon type=\"user\" style={{color: \"rgba(0,0,0,.25)\"}}/>} type=\"email\" placeholder=\"email\"/>\r\n                        )}\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    {getFieldDecorator(\"password\", {\r\n                        rules: [{ required: true, message: \"Passworrd cannot be empty\" }],\r\n                    })(\r\n                        <Input prefix={<Icon type=\"lock\" style={{ color: 'rgba(0,0,0,.25)' }} />} type=\"password\" placeholder=\"password\"/>\r\n                    )}\r\n                </Form.Item>\r\n                <Form.Item>\r\n                    {getFieldDecorator(\"role\", {\r\n                        rules: [{required: true, message: \"Please select a user category\"}]\r\n                    })(\r\n                        <Select prefix={<Icon type=\"usergroup-add\" style={{color: \"rgba(0,0,0,.25)\"}}/>} placeholder=\"category\" required>\r\n                            <Option value=\"user\">User</Option>\r\n                            <Option value=\"community builder\">Community Builder</Option>\r\n                            <Option value=\"admin\">Admin</Option>\r\n                        </Select>\r\n                                // <Input prefix= placeholder=\"Role\"/>\r\n                    )}\r\n                </Form.Item>\r\n                    <Button type=\"primary\" htmlType=\"submit\" className=\"login-form-button\">\r\n                        Log in\r\n                    </Button>\r\n                </Form>\r\n            )\r\n});\r\nclass Login extends Component {\r\n    state = {\r\n        fields: {\r\n            email: {},\r\n            password: {},\r\n            role: {}\r\n        }\r\n    }\r\n    handleChange = (changedFields) => {\r\n        this.setState(({fields}) => ({\r\n            fields: {...fields, ...changedFields}\r\n        }));\r\n    }\r\n    handleSubmit = (values) => {\r\n        const data = {username: values.email, password: values.password};\r\n        axios.post(\"/api/users/auth\", data).then((res)=>{\r\n            console.log(res);\r\n        })\r\n    }\r\n    render() {\r\n        return(\r\n            <div className=\"wrapper\">\r\n                <header className=\"one\">\r\n                    <h1 id=\"title\">Chit Chat</h1>\r\n                </header>\r\n                <div className=\"two\">\r\n                    <WrappedNormalLoginForm {...this.state.fields} onChange={this.handleChange} onSubmit={this.handleSubmit}/>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","import React, { Component } from 'react';\nimport Login from './components/Login/Login';\nimport 'antd/dist/antd.css';\n// import logo from './logo.svg';\n// import './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <Login/>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}